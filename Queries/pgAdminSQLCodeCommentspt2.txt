-- 7.3.2 Join the Tables
-- Recreate the retirement_info table with the emp_no Column 
DROP TABLE retirement_info;

-- Create new table for retiring employees
SELECT emp_no, first_name, last_name
INTO retirement_info
FROM employees
WHERE (birth_date BETWEEN '1952-01-01' AND '1955-12-31')
AND (hire_date BETWEEN '1985-01-01' AND '1988-12-31');
-- Check the table
SELECT * FROM retirement_info;

-- Use Different Types of Joins 
-- Inner Join: aka a Simple Join; Returns matching data from two tables 
--		Example: say we want to view teh department number and name as well as teh managers' employee number; we only want the matching data from both tables.  This means that if there are any NaNs from either table, they won't be included in teh data that is returned. 
-- Left Join: takes all the data from Table 1 and only the matching data from table 2 
--		Example: If we want to look at the departments and managers table, when the rows from the managers table do not have matching data for every row in the departments table, a NaN is inserted into that column and row intersection instead. 
-- See your google doc for additional notes 

-- Joins in Action 
-- Use Inner Join for Departments and dept_manager Tables 
SELECT departments.dept_name, 
	dept_manager.emp_no, 
	dept_manager.from_date, 
	dept_manager.to_date 
FROM departments
INNER JOIN dept_manager 
ON departments.dept_no = dept_manager.dept_no; 
-- REMINDER: YOu don't have to indent, it's just for visual reasons 
-- Inner join joins only the things that departments and and dept_manager have in common 
-- FROM tells us what Tbale 1 is, and INNER JOIN tells us what table 2 is 
-- ON departments.dept_no = manager.dept_no tells sql where to look for matches 
-- This tells sql to look at departments.dept_no as the index to manager.dept_no 
-- In other words, join based on these columns (dept_no) based on the tables departemtns or manager 
-- If we wanted to shorten the code above, we could also write it like this: 
SELECT d.dept_name, 
	dm.emp_no, 
	dm.from_date, 
	dm.to_date
FROM departments as d 
INNER JOIN dept_manager as dm 
ON d.dept_no = dm.dept_no; 


-- Use Left Join to Capture retirement-info Table 
-- Joining retirement_info and dept_emp tables 
SELECT retirement_info.emp_no, 
	retirement_info.first_name, 
retirement_info.last_name, 
	dept_emp.to_date
FROM retirement_info 
LEFT JOIN dept_emp
ON retirement_info.emp_no = dept_emp.emp_no; 

-- Use Aliases for Code Readability 
-- An alias in SQL allows us to give nicknames to tables 
SELECT ri.emp_no, 
	ri.first_name, 
	ri.last_name, 
	de.to_date
FROM  retirement_info as ri 
LEFT JOIN dept_emp as de 
ON ri.emp_no = de.emp_no; 
-- You can rename things like this above. 
-- The thing above is the same code in the "Joining retirement_info and dept_emp" tables, it's just with different aliases

-- Use Left Join for retirement_info and dept_emp tables 
-- we wat to make sure that the people who we have pulled as retirement-eligible employees still work at PH 

SELECT ri.emp_no, 
	ri.first_name, 
	ri.last_name, 
	de.to_date
INTO current_emp
FROM retirement_info as ri
LEFT JOIN dept_emp as de 
ON ri.emp_no = de.emp_no 
WHERE de.to_date = ('9999-01-01')
-- The code above says to select the emp_no, first_name, last_name and to_date column 
-- from the retirement_info column, and it shortens it as ri 

-- Use Count, Group By, and Order By 
-- Employee count by department number
SELECT COUNT(ce.emp_no), de.dept_no
FROM current_emp as ce
LEFT JOIN dept_emp as de
ON ce.emp_no = de.emp_no
GROUP BY de.dept_no;
-- The code above will take the count of the current_emp's emp_no column 
-- I don't know what de.dept_no does after the select count
-- Based on running the code, it appears that de.dept_no becomes it's own column in the 
-- outputted table, and this is paired on the left with a count of the employee numbers associated with a certain deptartment 
-- The above code is exported in a random order, if we want to order the output, then add the following code: 
-- Employee count by department number
SELECT COUNT(ce.emp_no), de.dept_no
FROM current_emp as ce
LEFT JOIN dept_emp as de
ON ce.emp_no = de.emp_no
GROUP BY de.dept_no
ORDER BY de.dept_no;

-- **SKILL DRILL: Update the code back to create a new table, then export it as a CSV file**
SELECT COUNT(ce.emp_no), de.dept_no
INTO bobby
FROM current_emp as ce
LEFT JOIN dept_emp as de
ON ce.emp_no = de.emp_no
GROUP BY de.dept_no
ORDER BY de.dept_no;

SELECT * FROM bobby;

-- 7.3.5 Create Additional Lists 
-- We need to make 3 additionall lists 
-- 
--    Employee Information: A list of employees containing their unique employee number, their last name, first name, gender, and salary
--    Management: A list of managers for each department, including the department number, name, and the manager's employee number, last name, first name, and the starting and ending employment dates
--    Department Retirees: An updated current_emp list that includes everything it currently has, but also the employee's departments
--
-- List 1: Employee Information 
-- This is what we need: 
--    Employee number
--    First name
--    Last name
--    Gender
--    to_date
--    Salary
SELECT * FROM salaries;
-- We want to sort it by descending order, so make it look like this: 
SELECT * FROM salaries
ORDER BY to_date DESC;
-- Now we can see an order salaries table 
-- The to_dates here look a little wonky, so we are going to pull the employment dates from teh dept_emp table agian 
SELECT emp_no, first_name, last_name, gender 
INTO emp_info 
FROM employees 
WHERE (birth_date BETWEEN '1952-01-01' AND '1955-12-31')
AND(hire_date BETWEEN '1985-01-01' AND '1988-12-31');

SELECT * FROM emp_info;

DROP TABLE emp_info;
-- We need to update it 
-- Final List 1: Employee Information
SELECT e.emp_no, e.first_name, e.last_name, e.gender, s.salary, de.to_date
INTO emp_info 
FROM employees as e 
INNER JOIN salaries as s 
ON (e.emp_no = s.emp_no)
INNER JOIN dept_emp as de
ON (e.emp_no = de.emp_no)
WHERE (e.birth_date BETWEEN '1952-01-01' AND '1955-12-31')
     AND (e.hire_date BETWEEN '1985-01-01' AND '1988-12-31')
	    AND (de.to_date = '9999-01-01');
-- Above is how to do a double inner join table merge

-- List 2: Management 
-- List of managers per department
SELECT  dm.dept_no,
        d.dept_name,
        dm.emp_no,
        ce.last_name,
        ce.first_name,
        dm.from_date,
        dm.to_date
INTO manager_info
FROM dept_manager AS dm
    INNER JOIN departments AS d
        ON (dm.dept_no = d.dept_no)
    INNER JOIN current_emp AS ce
        ON (dm.emp_no = ce.emp_no);
		
-- List 3: Department Retirees 
SELECT ce.emp_no,
ce.first_name,
ce.last_name,
d.dept_name
INTO dept_info
FROM current_emp as ce
INNER JOIN dept_emp AS de
ON (ce.emp_no = de.emp_no)
INNER JOIN departments AS d
ON (de.dept_no = d.dept_no);

-- Create a Tailored List 
-- ** SKILL DRILL: Create a query that will return only the infomration relevant to the Sales team ** 
-- include: 
-- Emplyee numbers 
-- Employee first name 
-- Employee last name 
-- Employee department name 

SELECT ce.emp_no,
ce.first_name,
ce.last_name,
d.dept_name
FROM current_emp as ce
INNER JOIN dept_emp AS de
ON (ce.emp_no = de.emp_no)
INNER JOIN departments AS d
ON (de.dept_no = d.dept_no);

-- ** SKILL DRILL: 

-- Create another query that will return the following information for the Sales and Development teams:

--    Employee numbers
--    Employee first name
--    Employee last name
--    Employee department name

--Hint: You'll need to use the IN condition with the WHERE clause. See the PostgreSQL documentation (Links to an external site.) for additional information.

--The IN condition is necessary because you're creating two items in the same column.

SELECT e.emp_no, e.first_name, e.last_name, d.dept_no, de.dept_name 
FROM employees as e 
INNER JOIN dept_emp as d 
ON (e.emp_no = d.emp_no)
INNER JOIN departments as de
ON (de.dept_no = d.dept_no)
WHERE de.dept_name IN ('Sales', 'Development');




